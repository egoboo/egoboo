.PHONY: idlib egolib egoboo clean set_debug_flags debug
	
debug: set_gcc_flags set_debug_flags all
debug-extra: set_gcc_flags set_debug_flags set_sanitizer_flags all
release: set_gcc_flags set_release_flags all
clang: set_clang_flags set_sanitizer_flags all

all: idlib egolib egoboo

COMPILE_FLAGS := -x c++ -std=c++1z $(shell sdl2-config --cflags)
COMPILE_WARNINGS := -Wall -Wextra -Wfatal-errors
COMPILE_DEBUG_FLAGS := -fdiagnostics-color=always
COMPILE_OPTIMIZE := -O0
SANITIZER_FLAGS := 
LINKER_FLAGS := 

#Silence warnings we do not care about
COMPILE_WARNINGS += -Wno-sign-compare -Wno-reorder -Wno-unused-parameter

#Enable some extra warnings
COMPILE_WARNINGS += -Wcast-align -Wpointer-arith -Wwrite-strings -Wunreachable-code
COMPILE_WARNINGS += -Wno-div-by-zero -Wunreachable-code -Wformat=2 -Wno-missing-braces
COMPILE_WARNINGS += -Wnull-dereference -Wshift-negative-value
#-Wcast-qual -Wswitch-enum -Wshadow -Wsuggest-attribute=const -Wsuggest-attribute=format -Wsuggest-override

set_clang_flags:
	$(eval CXX := ccache clang++) #/usr/share/clang/scan-build-3.8/bin/../libexec/c++-analyzer
	$(eval ARCHIVER := llvm-ar)
	$(eval COMPILE_DEBUG_FLAGS += -ggdb3 -D_DEBUG)
	$(eval COMPILE_OPTIMIZE := -O1 -march=native)
	$(eval COMPILE_FLAGS += -ftemplate-depth=1024)
	$(eval LINKER_FLAGS += -stdlib=libc++)

set_gcc_flags:
	$(eval CXX := ccache g++)
	$(eval ARCHIVER := gcc-ar)
	$(eval COMPILE_WARNINGS += -Wduplicated-cond -Wlogical-op -Wstrict-overflow=4 -Wshift-overflow=2)
	$(eval COMPILE_DEBUG_FLAGS += -fvar-tracking-assignments)
	$(eval COMPILE_FLAGS += -D_FORTIFY_SOURCE=2)
	$(eval LINKER_FLAGS += -flto=jobserver)
	$(eval SANITIZER_FLAGS := -fno-sanitize=all)

set_sanitizer_flags:
	$(eval SANITIZER_FLAGS := -fsanitize=undefined -fsanitize=leak -fsanitize=address, -fsanitize=integer)

set_debug_flags:
	$(eval COMPILE_DEBUG_FLAGS += -ggdb3 -D_DEBUG)
	$(eval COMPILE_OPTIMIZE := -Og -march=native)

set_release_flags:
	$(eval COMPILE_DEBUG_FLAGS += -DNDEBUG)
	$(eval COMPILE_WARNINGS += -Werror)
	$(eval COMPILE_OPTIMIZE := -Ofast -frename-registers -fuse-linker-plugin -flto=jobserver)
	$(eval COMPILE_OPTIMIZE += -mfpmath=sse -m64 -mmmx -msse -msse2 -msse3 -m3dnow)
	$(eval LINKER_FLAGS := -Wl,-fuse-ld=gold -flto=jobserver)

export CXX ARCHIVER COMPILE_FLAGS COMPILE_OPTIMIZE COMPILE_WARNINGS COMPILE_DEBUG_FLAGS SANITIZER_FLAGS LINKER_FLAGS

egolib:
	${MAKE} -C ./egolib -f Makefile.Linux

idlib:
	${MAKE} -C ./idlib -f Makefile.Linux

egoboo: idlib egolib
	${MAKE} -C ./game -f Makefile.Linux
	
clean:
	find . -name "*.o" -exec $(RM) {} \;
	find . -name "*.plist" -exec $(RM) -r {} \;
	find . -name "clang_output_*" -exec $(RM) {} \;
	find . -name "temp_buf_*" -exec $(RM) {} \;
	
configure:
	git submodule init
	git submodule update
	sudo apt-get install ccache libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev libphysfs-dev

cppcheck:
	mkdir cppcheck-result -p
	nice \
		 external/cppcheck/cppcheck \
		 --report-progress \
		 --enable=all \
		 --platform=unix32 \
		 --xml-version=2 \
		 --inconclusive \
		 --force \
		 -I ./game/src \
		 -I ./egolib/src \
		 -I ./idlib/src \
		 ./game \
		 ./egolib \
		 ./idlib \
		 -j8 \
		 -q \
		 2> cppcheck-result/cppcheck.xml
	./external/cppcheck/htmlreport/cppcheck-htmlreport --file=cppcheck-result/cppcheck.xml --report-dir=cppcheck-result
